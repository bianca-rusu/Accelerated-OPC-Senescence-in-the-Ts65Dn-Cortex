# Load the object.
library(Seurat)
RNA <- readRDS("Ts65Dn_OPC_Senescence_RNA_Object.rds")

# Create new columns for the condition and replicate.
dsRNA_1 <- strsplit(colnames(dsRNA), split = "_") 
dsRNA@meta.data <- cbind(dsRNA@meta.data, dsRNA_1)
colnames(dsRNA@meta.data)[which(names(dsRNA@meta.data) == "dsRNA_1")] <- "Condition"
dsRNA_1 <- strsplit(colnames(RNA), split = "-")
RNA@meta.data <- cbind(RNA@meta.data, dsRNA_1$X2)
colnames(RNA@meta.data)[which(names(RNA@meta.data) == "dsRNA_1$X2")] <- "Replicate"
RNA$replicates <-paste(RNA$Condition, RNA$rep, sep="_")

# Create new columns for the percent mitochondrial DNA.
RNA[["percent.mt"]] <- PercentageFeatureSet(RNA, pattern = "^MT-")

# Generate QC violin plots of features, counts, and percent mitochondrial content.
VlnPlot(RNA, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
VlnPlot(RNA, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3, pt.size = 0)

# Generate feature scatter plots of count vs. features and percent mitochondrial content.
plot1 <- FeatureScatter(RNA, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(RNA, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2

# Overwrite the object such that only the desired cells are included.
RNA <- subset(RNA, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)

# Normalize the data.
RNA <- NormalizeData(RNA, normalization.method = "LogNormalize", scale.factor = 10000)
RNA_sub <- NormalizeData(RNA_sub)

# Calculate a subset of features (2000 total) exhibiting high cell-to-cell variation.
RNA_sub <- FindVariableFeatures(RNA_sub, selection.method = "vst", nfeatures = 2000)

# Scale the data.
all.genes <- rownames(RNA_sub)
RNA_sub <- ScaleData(RNA_sub, features = all.genes)

# Perform PCA on the scaled data with the previously determined variable features.
RNA_sub <- RunPCA(RNA_sub, features = VariableFeatures(object = RNA))

# Generate an elbow plot to identify 'significant' PCs.
ElbowPlot(RNA)

# Generate cell clusters. Select 20 dimensions for all downstream analysis.
RNA_sub <- FindNeighbors(RNA_sub, dims = 1:20) 
RNA_sub <- FindClusters(RNA_sub, resolution = 0.5)
RNA_sub <- RunUMAP(RNA_sub, dims = 1:20)

# Use known canonical cell markers to begin identifying cell clusters and label clusters according to cell type.
VlnPlot(RNA, features = c([cell markers])
FeaturePlot(RNA, features = c([cell markers])
new.cluster.ids <- c([cluster IDs) <- levels(RNA)
RNA <- RenameIdents(RNA, new.cluster.ids)

# Find differentially expressed genes based on condition (Ts65Dn vs. CTL) for each cell type cluster:
cluster_celltype <- subset(x = DS, idents = "Celltype")
cluster_celltype@active.ident <- as.factor(cluster_celltype$Condition)
cluster_celltype_markers_CTLvsDS <- FindMarkers(object = cluster_celltype, ident.1 = "Control", ident.2 = "DS",
min.pct = 0.05, test.use = 'LR', logfc.threshold = 0.1, latent.vars = 'nCount_RNA')
cluster_celltype_markers_CTLvsDS$FDR <- p.adjust(cluster_celltype_markers_CTLvsDS$p_val, method="BH")

# Create subclusters for inhibitory and excitatory neurons (same code for both; change idents = Inhibitory or Excitatory).
RNA_Inhibitory <- subset(x = RNA, idents = "Inhibitory Neurons")
RNA_Inhibitory <- FindVariableFeatures(RNA_Inhibitory, selection.method = "vst", nfeatures = 2000)
top10 <- head(VariableFeatures(RNA_Inhibitory), 10)
all.genes <- rownames(RNA_Inhibitory)
RNA_Inhibitory <- ScaleData(RNA_Inhibitory, features = all.genes)
RNA_Inhibitory <- RunPCA(RNA_Inhibitory, features = VariableFeatures(object = INB))
RNA_Inhibitory <- FindNeighbors(RNA_Inhibitory, dims = 1:20) 
RNA_Inhibitory <- FindClusters(RNA_Inhibitory, resolution = 0.5)
RNA_Inhibitory <- RunUMAP(RNA_Inhibitory, dims = 1:20)
Idents(RNA_Inhibitory) <- seurat_clusters
new.cluster.ids <- c([subtypes])
names(new.cluster.ids) <- levels(RNA_Inhibitory)
RNA_Inhibitory <- RenameIdents(RNA_Inhibitory, new.cluster.ids)
